# -*- coding: utf-8 -*-
"""
Created on Thu May  3 21:24:09 2018

@author: Andre Kern

Funcoes de suporte para a criacao da skeleton tree
"""
import subprocess
from time import sleep
from scapy.all import *
from easysnmp import Session
from easysnmp.exceptions import (
    EasySNMPTimeoutError, EasySNMPConnectionError,
    EasySNMPUnknownObjectIDError)
from ipaddress import IPv4Interface  # , IPv4Network
from netaddr import EUI
from netaddr.strategy.eui48 import mac_cisco, mac_unix_expanded
from pdb import set_trace as breakpoint
from typing import Union, Tuple, List, Dict, Optional, TypeVar, Set

# Callable, Any

ArpTable = List[Tuple[IPv4Interface, EUI]]
Mac = bytes
Ip = str
Macs = Set[Mac]
Port = str
PortAFT = Dict[Port, Macs]
Aft = Dict[Ip, PortAFT]
ArpTableData = Dict[Ip, ArpTable]

# =============================================================================
# ConnectionOptions = Dict[str, str]
# Address = Tuple[str, int]
# Server = Tuple[Address, ConnectionOptions]
# =============================================================================


# %% Constantes
YES = ON = START = True
NO = OFF = STOP = False
SubNet = TypeVar('SubNet')


def manual_aft() -> Aft:
    """
    Criado manualmente. AFT resultantes de probes originados do NMS para
    topologia de referencia

    :return: Estrutura com dados da AFT
    :rtype: dict
    """
    nms = b'\x00\x0c)\\Bq'  # NMS 10.0.*.111/24 000c.295c.4271
    v1 = b'\x00>\\\x01\x80\x01'  # 10.0.0.1/24 003e.5c01.8001
    v2 = b'\x00>\\\x02\x80\x01'  # 10.0.0.2/24 003e.5c02.8001
    v3 = b'\x00>\\\x03\x80\x01'  # 10.0.0.3/24 003e.5c03.8001
    v4 = b'\x00>\\\x04\x80\x01'  # 10.0.0.4/24 003e.5c04.8001
    v5 = b'\x00>\\\x05\x80\x01'  # 10.0.0.5/24 003e.5c05.8001
    v6 = b'\x00>\\\x06\x80\x01'  # 10.0.0.6/24 003e.5c06.8001

    j = b'\x00Pyfh\x02'  # 10.0.20.1/24 0050.7966.6802
    k = b'\x00Pyfh\x03'  # 10.0.20.2/24 0050.7966.6803
    l = b'\x00Pyfh\x04'  # 10.0.20.3/24 0050.7966.6804
    m = b'\x00Pyfh\x06'  # 10.0.20.4/24 0050.7966.6806

    x = b'\x00Pyfh\x00'  # 10.0.30.1/24 0050.7966.6800
    y = b'\x00Pyfh\x0b'  # 10.0.30.2/24 0050.7966.680b
    z = b'\x00Pyfh\x01'  # 10.0.30.3/24 0050.7966.6801

    a = b'\x00Pyfh\x0c'  # 10.0.10.1/24 0050.7966.680c
    b = b'\x00Pyfh\x05'  # 10.0.10.2/24 0050.7966.6805
    c = b'\x00Pyfh\t'    # 10.0.10.3/24 0050.7966.6809
    d = b'\x00Pyfh\n'    # 10.0.10.4/24 0050.7966.680a
    e = b'\x00Pyfh\x08'  # 10.0.10.5/24 0050.7966.6808
    f = b'\x00Pyfh\x07'  # 10.0.10.6/24 0050.7966.6807

    v1p = {'1': 'Gi0/0',
           '2': 'Gi0/1',
           '3': 'Gi0/2',
           '15': 'Gi3/2',
           '16': 'Gi3/3'}

    v2p = {'1': 'Gi0/0',
           '2': 'Gi0/1',
           '3': 'Gi0/2',
           '16': 'Gi3/3'}

    v3p = {'1': 'Gi0/0',
           '2': 'Gi0/1',
           '16': 'Gi3/3'}

    v4p = {'1': 'Gi0/0',
           '15': 'Gi3/2',
           '16': 'Gi3/3'}

    v5p = {'1': 'Gi0/0',
           '15': 'Gi3/2',
           '16': 'Gi3/3'}

    v6p = {'1': 'Gi0/0',
           '15': 'Gi3/2',
           '16': 'Gi3/3'}

    # (ip, porta, macs)
    aft = {'10.0.0.1/24': {
        '15': {a},
        '16': {z},
        '2': {y, x, v6},
        '3': {v2, v3, v4, v5, j, k, l, m, b, c, d, e, f},
        '1': {nms}
        },
        '10.0.0.2/24': {
            '1': {nms},
            '16': {l},
            '2': {v4, j, k},
            '3': {v3, v5, b, c, d, e, f, m}
        },
        '10.0.0.3/24': {
            '1': {nms},
            '2': {v5, c, d, e, f, m},
            '16': {b}},
        '10.0.0.4/24': {
            '1': {nms},
            '15': {j},
            '16': {k}},
        '10.0.0.5/24': {
            '1': {nms},
            '15': {c},
            '16': {d}},
        '10.0.0.6/24': {
            '1': {nms},
            '15': {x},
            '16': {y}}
    }
    return aft


aft_fdb = manual_aft()


# aft_fdb data:
# {'10.0.0.1/24': {'1': {b'\x00\x0c)\\Bq'},
#                  '15': {b'\x00Pyfh\x0c'},
#                  '16': {b'\x00Pyfh\x01'},
#                  '2': {b'\x00>\\\x06\x80\x01',
#                        b'\x00Pyfh\x00',
#                        b'\x00Pyfh\x0b'},
#                  '3': {b'\x00>\\\x02\x80\x01',
#                        b'\x00>\\\x03\x80\x01',
#                        b'\x00>\\\x04\x80\x01',
#                        b'\x00>\\\x05\x80\x01',
#                        b'\x00Pyfh\x02',
#                        b'\x00Pyfh\x03',
#                        b'\x00Pyfh\x04',
#                        b'\x00Pyfh\x05',
#                        b'\x00Pyfh\x06',
#                        b'\x00Pyfh\x07',
#                        b'\x00Pyfh\x08',
#                        b'\x00Pyfh\t',
#                        b'\x00Pyfh\n'}},
#  '10.0.0.2/24': {'1': {b'\x00\x0c)\\Bq'},
#                  '16': {b'\x00Pyfh\x04'},
#                  '2': {b'\x00>\\\x04\x80\x01',
#                        b'\x00Pyfh\x02',
#                        b'\x00Pyfh\x03'},
#                  '3': {b'\x00>\\\x03\x80\x01',
#                        b'\x00>\\\x05\x80\x01',
#                        b'\x00Pyfh\x05',
#                        b'\x00Pyfh\x06',
#                        b'\x00Pyfh\x07',
#                        b'\x00Pyfh\x08',
#                        b'\x00Pyfh\t',
#                        b'\x00Pyfh\n'}},
#  '10.0.0.3/24': {'1': {b'\x00\x0c)\\Bq'},
#                  '16': {b'\x00Pyfh\x05'},
#                  '2': {b'\x00>\\\x05\x80\x01',
#                        b'\x00Pyfh\x06',
#                        b'\x00Pyfh\x07',
#                        b'\x00Pyfh\x08',
#                        b'\x00Pyfh\t',
#                        b'\x00Pyfh\n'}},
#  '10.0.0.4/24': {'1': {b'\x00\x0c)\\Bq'},
#                  '15': {b'\x00Pyfh\x02'},
#                  '16': {b'\x00Pyfh\x03'}},
#  '10.0.0.5/24': {'1': {b'\x00\x0c)\\Bq'},
#                  '15': {b'\x00Pyfh\t'},
#                  '16': {b'\x00Pyfh\n'}},
#  '10.0.0.6/24': {'1': {b'\x00\x0c)\\Bq'},
#                  '15': {b'\x00Pyfh\x00'},
#                  '16': {b'\x00Pyfh\x0b'}}}


# %% SNMP_DATA
def auto_snmp_data(complete_aft: bool = True) -> dict:
    """Retorna dicionario com os dados snmp (sem probe) dos internal nodes
    no formato {'ip/masc':{'atributo1': 'valor1', 'atributo2': 'valor2', ...}

    :return: Dicionario com dados snmp coletados
    :rtype: dict
    """

    # snmp_data = \
    #     {'10.0.0.1/24': {'sys_name': 'v1',
    #                      'port_activelist': [
    #                          ('1', 'Gi0/0'),
    #                          ('2', 'Gi0/1'),
    #                          ('3', 'Gi0/2'),
    #                          ('5', 'Gi1/0'),
    #                          ('6', 'Gi1/1'),
    #                          ('7', 'Gi1/2'),
    #                          ('8', 'Gi1/3'),
    #                          ('15', 'Gi3/2'),
    #                          ('16', 'Gi3/3')
    #                      ],
    #                      'dot1d_base_num_ports': '16',
    #                      'dot1_base_type': '2',
    #                      'dot1d_tp_fdb_address': [
    #                          #b"\x00\x0c);'\x1e",  # 10.0.*.111/24 000c.293b.271e
    #                          b'\x00\x0c)\\Bq',  # 10.0.*.111/24 000c.295c.4271
    #                          b'\x00>\\\x02\x80\x01',  # 10.0.0.2/24 003e.5c02.8001
    #                          b'\x00>\\\x03\x80\x01',  # 10.0.0.3/24 003e.5c03.8001
    #                          b'\x00>\\\x04\x80\x01',  # 10.0.0.4/24 003e.5c04.8001
    #                          b'\x00>\\\x05\x80\x01',  # 10.0.0.5/24 003e.5c05.8001
    #                          b'\x00>\\\x06\x80\x01',  # 10.0.0.6/24 003e.5c06.8001
    #                          b'\x00Pyfh\x00',  # 10.0.30.1/24 0050.7966.6800
    #                          b'\x00Pyfh\x01',  # 10.0.30.3/24 0050.7966.6801
    #                          b'\x00Pyfh\x02',  # 10.0.20.1/24 0050.7966.6802
    #                          b'\x00Pyfh\x03',  # 10.0.20.2/24 0050.7966.6803
    #                          b'\x00Pyfh\x04',  # 10.0.20.3/24 0050.7966.6804
    #                          b'\x00Pyfh\x05',  # 10.0.10.2/24 0050.7966.6805
    #                          b'\x00Pyfh\x06',  # 10.0.20.4/24 0050.7966.6806
    #                          b'\x00Pyfh\x07',  # 10.0.10.6/24 0050.7966.6807
    #                          b'\x00Pyfh\x08',  # 10.0.10.5/24 0050.7966.6808
    #                          b'\x00Pyfh\t',  # 10.0.10.3/24 0050.7966.6809
    #                          b'\x00Pyfh\n',  # 10.0.10.4/24 0050.7966.680a
    #                          b'\x00Pyfh\x0b',  # 10.0.30.2/24 0050.7966.680b
    #                          b'\x00Pyfh\x0c',  # 10.0.10.1/24 0050.7966.680c
    #                          b'\xc4\x01\x08\x83\x00\x01',
    #                          b'\xc4\x01\x08\x83\x00\x10',
    #                          b'\xc4\x01\x08\x83\x00 ',
    #                          b'\xc4\x01\x08\x83\x000'
    #                      ],
    #                      'dot1d_tp_fdb_port': [
    #                          '1',
    #                          '3',
    #                          '3',
    #                          '3',
    #                          '3',
    #                          '2',
    #                          '2',
    #                          '16',
    #                          '3',
    #                          '3',
    #                          '3',
    #                          '3',
    #                          '3',
    #                          '3',
    #                          '3',
    #                          '3',
    #                          '3',
    #                          '2',
    #                          '15',
    #                          '5',
    #                          '6',
    #                          '7',
    #                          '8'
    #                      ]
    #                      },
    #      '10.0.0.2/24': {'sys_name': 'v2',
    #                      'port_activelist': [
    #                          ('1', 'Gi0/0'),
    #                          ('2', 'Gi0/1'),
    #                          ('3', 'Gi0/2'),
    #                          ('16', 'Gi3/3')
    #                      ],
    #                      'dot1d_base_num_ports': '16',
    #                      'dot1_base_type': '2',
    #                      'dot1d_tp_fdb_address': [
    #                          b'\x00\x0c)\\Bq',  # 10.0.*.111/24 000c.295c.4271
    #                          b'\x00>\\\x03\x80\x01',  # 10.0.0.3/24 003e.5c03.8001
    #                          b'\x00>\\\x04\x80\x01',  # 10.0.0.4/24 003e.5c04.8001
    #                          b'\x00>\\\x05\x80\x01',  # 10.0.0.5/24 003e.5c05.8001
    #                          b'\x00Pyfh\x02',  # 10.0.20.1/24 0050.7966.6802
    #                          b'\x00Pyfh\x03',  # 10.0.20.2/24 0050.7966.6803
    #                          b'\x00Pyfh\x04',  # 10.0.20.3/24 0050.7966.6804
    #                          b'\x00Pyfh\x05',  # 10.0.10.2/24 0050.7966.6805
    #                          b'\x00Pyfh\x06',  # 10.0.20.4/24 0050.7966.6806
    #                          b'\x00Pyfh\x07',  # 10.0.10.6/24 0050.7966.6807
    #                          b'\x00Pyfh\x08',  # 10.0.10.5/24 0050.7966.6808
    #                          b'\x00Pyfh\t',  # 10.0.10.3/24 0050.7966.6809
    #                          b'\x00Pyfh\n'  # 10.0.10.4/24 0050.7966.680a
    #                      ],
    #                      'dot1d_tp_fdb_port': [
    #                          '1',
    #                          '3',
    #                          '2',
    #                          '3',
    #                          '2',
    #                          '2',
    #                          '16',
    #                          '3',
    #                          '3',
    #                          '3',
    #                          '3',
    #                          '3',
    #                          '3'
    #                      ]
    #                     },
    #      '10.0.0.3/24': {'sys_name': 'v3',
    #                      'port_activelist': [
    #                          ('1', 'Gi0/0'),
    #                          ('2', 'Gi0/1'),
    #                          ('16', 'Gi3/3')
    #                      ],
    #                      'dot1d_base_num_ports': '16',
    #                      'dot1_base_type': '2',
    #                      'dot1d_tp_fdb_address': [
    #                          b'\x00\x0c)\\Bq',  # 10.0.*.111/24 000c.295c.4271
    #                          b'\x00>\\\x05\x80\x01',  # 10.0.0.5/24 003e.5c05.8001
    #                          b'\x00Pyfh\x05',  # 10.0.10.2/24 0050.7966.6805
    #                          b'\x00Pyfh\x06',  # 10.0.20.4/24 0050.7966.6806
    #                          b'\x00Pyfh\x07',  # 10.0.10.6/24 0050.7966.6807
    #                          b'\x00Pyfh\x08',  # 10.0.10.5/24 0050.7966.6808
    #                          b'\x00Pyfh\t',  # 10.0.10.3/24 0050.7966.6809
    #                          b'\x00Pyfh\n'  # 10.0.10.4/24 0050.7966.680a
    #                      ],
    #                      'dot1d_tp_fdb_port': ['1', '2', '16', '2', '2', '2', '2', '2']},
    #      '10.0.0.4/24': {'sys_name': 'v4',
    #                      'port_activelist': [
    #                          ('1', 'Gi0/0'),
    #                          ('15', 'Gi3/2'),
    #                          ('16', 'Gi3/3')
    #                      ],
    #                      'dot1d_base_num_ports': '16',
    #                      'dot1_base_type': '2',
    #                      'dot1d_tp_fdb_address': [
    #                          b'\x00\x0c)\\Bq',  # 10.0.*.111/24 000c.295c.4271
    #                          b'\x00Pyfh\x02',  # 10.0.20.1/24 0050.7966.6802
    #                          b'\x00Pyfh\x03',  # 10.0.20.2/24 0050.7966.6803
    #                      ],
    #                      'dot1d_tp_fdb_port': ['1', '15', '16']
    #                     },
    #      '10.0.0.5/24': {'sys_name': 'v5',
    #                      'port_activelist': [
    #                          ('1', 'Gi0/0'),
    #                          ('15', 'Gi3/2'),
    #                          ('16', 'Gi3/3')],
    #                      'dot1d_base_num_ports': '16',
    #                      'dot1_base_type': '2',
    #                      'dot1d_tp_fdb_address': [
    #                          b'\x00\x0c)\\Bq',  # 10.0.*.111/24 000c.295c.4271
    #                          b'\x00Pyfh\t',  # 10.0.10.3/24 0050.7966.6809
    #                          b'\x00Pyfh\n'  # 10.0.10.4/24 0050.7966.680a
    #                      ],
    #                      'dot1d_tp_fdb_port': ['1', '15', '16']},
    #      '10.0.0.6/24': {'sys_name': 'v6',
    #                      'port_activelist': [
    #                          ('1', 'Gi0/0'),
    #                          ('15', 'Gi3/2'),
    #                          ('16', 'Gi3/3')],
    #                      'dot1d_base_num_ports': '16',
    #                      'dot1_base_type': '2',
    #                      'dot1d_tp_fdb_address': [
    #                          b'\x00\x0c)\\Bq',  # 10.0.*.111/24 000c.295c.4271
    #                          b'\x00Pyfh\x00',  # 10.0.30.1/24 0050.7966.6800
    #                          b'\x00Pyfh\x0b'  # 10.0.30.2/24 0050.7966.680b
    #                      ],
    #                      'dot1d_tp_fdb_port': ['1', '15', '16']
    #                     }
    #      }

    snmp_data = \
        {'10.0.0.1/24': {'dot1_base_type': '2',
                         'dot1d_base_num_ports': '16',
                         'dot1d_tp_fdb_address': [b'\xc4\x01\x08\x83\x00\x01',
                                                  b'\xc4\x01\x08\x83\x00\x10',
                                                  b'\xc4\x01\x08\x83\x00 ',
                                                  b'\xc4\x01\x08\x83\x000',
                                                  b'\x00\x0c)\\Bq',
                                                  b'\x00Pyfh\x0c',
                                                  b'\x00Pyfh\x01',
                                                  b'\x00>\\\x06\x80\x01',
                                                  b'\x00Pyfh\x0b',
                                                  b'\x00Pyfh\x00',
                                                  b'\x00Pyfh\x04',
                                                  b'\x00Pyfh\x03',
                                                  b'\x00Pyfh\n',
                                                  b'\x00Pyfh\x02',
                                                  b'\x00>\\\x04\x80\x01',
                                                  b'\x00Pyfh\t',
                                                  b'\x00>\\\x03\x80\x01',
                                                  b'\x00Pyfh\x06',
                                                  b'\x00Pyfh\x08',
                                                  b'\x00Pyfh\x05',
                                                  b'\x00Pyfh\x07',
                                                  b'\x00>\\\x02\x80\x01',
                                                  b'\x00>\\\x05\x80\x01'],
                         'dot1d_tp_fdb_port': ['5',
                                               '6',
                                               '7',
                                               '8',
                                               '1',
                                               '15',
                                               '16',
                                               '2',
                                               '2',
                                               '2',
                                               '3',
                                               '3',
                                               '3',
                                               '3',
                                               '3',
                                               '3',
                                               '3',
                                               '3',
                                               '3',
                                               '3',
                                               '3',
                                               '3',
                                               '3'],
                         'port_activelist': [('2', 'Gi0/1'),
                                             ('3', 'Gi0/2'),
                                             ('5', 'Gi1/0'),
                                             ('6', 'Gi1/1'),
                                             ('7', 'Gi1/2'),
                                             ('8', 'Gi1/3'),
                                             ('15', 'Gi3/2'),
                                             ('16', 'Gi3/3')],
                         'sys_name': 'v1'},
         '10.0.0.2/24': {'dot1_base_type': '2',
                         'dot1d_base_num_ports': '16',
                         'dot1d_tp_fdb_address': [b'\x00\x0c)\\Bq',
                                                  b'\x00Pyfh\x04',
                                                  b'\x00>\\\x04\x80\x01',
                                                  b'\x00Pyfh\x02',
                                                  b'\x00Pyfh\x03',
                                                  b'\x00Pyfh\n',
                                                  b'\x00Pyfh\t',
                                                  b'\x00>\\\x03\x80\x01',
                                                  b'\x00Pyfh\x06',
                                                  b'\x00Pyfh\x08',
                                                  b'\x00Pyfh\x05',
                                                  b'\x00Pyfh\x07',
                                                  b'\x00>\\\x05\x80\x01'],
                         'dot1d_tp_fdb_port': ['1',
                                               '16',
                                               '2',
                                               '2',
                                               '2',
                                               '3',
                                               '3',
                                               '3',
                                               '3',
                                               '3',
                                               '3',
                                               '3',
                                               '3'],
                         'port_activelist': [('1', 'Gi0/0'),
                                             ('2', 'Gi0/1'),
                                             ('3', 'Gi0/2'),
                                             ('16', 'Gi3/3')],
                         'sys_name': 'v2'},
         '10.0.0.3/24': {'dot1_base_type': '2',
                         'dot1d_base_num_ports': '16',
                         'dot1d_tp_fdb_address': [b'\x00\x0c)\\Bq',
                                                  b'\x00Pyfh\x05',
                                                  b'\x00Pyfh\n',
                                                  b'\x00Pyfh\t',
                                                  b'\x00Pyfh\x06',
                                                  b'\x00Pyfh\x08',
                                                  b'\x00Pyfh\x07',
                                                  b'\x00>\\\x05\x80\x01'],
                         'dot1d_tp_fdb_port': ['1', '16', '2', '2', '2', '2',
                                               '2', '2'],
                         'port_activelist': [('1', 'Gi0/0'),
                                             ('2', 'Gi0/1'),
                                             ('16', 'Gi3/3')],
                         'sys_name': 'v3'},
         '10.0.0.4/24': {'dot1_base_type': '2',
                         'dot1d_base_num_ports': '16',
                         'dot1d_tp_fdb_address': [b'\x00\x0c)\\Bq',
                                                  b'\x00Pyfh\x02',
                                                  b'\x00Pyfh\x03'],
                         'dot1d_tp_fdb_port': ['1', '15', '16'],
                         'port_activelist': [('1', 'Gi0/0'),
                                             ('15', 'Gi3/2'),
                                             ('16', 'Gi3/3')],
                         'sys_name': 'v4'},
         '10.0.0.5/24': {'dot1_base_type': '2',
                         'dot1d_base_num_ports': '16',
                         'dot1d_tp_fdb_address': [b'\x00\x0c)\\Bq',
                                                  b'\x00Pyfh\t',
                                                  b'\x00Pyfh\n'],
                         'dot1d_tp_fdb_port': ['1', '15', '16'],
                         'port_activelist': [('1', 'Gi0/0'),
                                             ('15', 'Gi3/2'),
                                             ('16', 'Gi3/3')],
                         'sys_name': 'v5'},
         '10.0.0.6/24': {'dot1_base_type': '2',
                         'dot1d_base_num_ports': '16',
                         'dot1d_tp_fdb_address': [b'\x00\x0c)\\Bq',
                                                  b'\x00Pyfh\x00',
                                                  b'\x00Pyfh\x0b'],
                         'dot1d_tp_fdb_port': ['1', '15', '16'],
                         'port_activelist': [('1', 'Gi0/0'),
                                             ('15', 'Gi3/2'),
                                             ('16', 'Gi3/3')],
                         'sys_name': 'v6'}}
    snmp_data_full = \
        {'10.0.0.1/24': {'sys_name': 'v1',
                         'port_activelist': [
                             # ('1', 'Gi0/0'),  # NMS
                             ('2', 'Gi0/1'),
                             ('3', 'Gi0/2'),
                             ('5', 'Gi1/0'),
                             ('6', 'Gi1/1'),
                             ('7', 'Gi1/2'),
                             ('8', 'Gi1/3'),
                             ('15', 'Gi3/2'),
                             ('16', 'Gi3/3')
                         ],
                         'dot1d_base_num_ports': '16',
                         'dot1_base_type': '2',
                         'dot1d_tp_fdb_address': [
                             b'\x00\x0c)\\Bq',  # NMS 10.0.*.111/24 000c.295c.4271
                             b'\x00>\\\x02\x80\x01',  # 10.0.0.2/24 003e.5c02.8001
                             b'\x00>\\\x03\x80\x01',  # 10.0.0.3/24 003e.5c03.8001
                             b'\x00>\\\x04\x80\x01',  # 10.0.0.4/24 003e.5c04.8001
                             b'\x00>\\\x05\x80\x01',  # 10.0.0.5/24 003e.5c05.8001
                             b'\x00>\\\x06\x80\x01',  # 10.0.0.6/24 003e.5c06.8001
                             b'\x00Pyfh\x00',  # 10.0.30.1/24 0050.7966.6800
                             b'\x00Pyfh\x01',  # 10.0.30.3/24 0050.7966.6801
                             b'\x00Pyfh\x02',  # 10.0.20.1/24 0050.7966.6802
                             b'\x00Pyfh\x03',  # 10.0.20.2/24 0050.7966.6803
                             b'\x00Pyfh\x04',  # 10.0.20.3/24 0050.7966.6804
                             b'\x00Pyfh\x05',  # 10.0.10.2/24 0050.7966.6805
                             b'\x00Pyfh\x06',  # 10.0.20.4/24 0050.7966.6806
                             b'\x00Pyfh\x07',  # 10.0.10.6/24 0050.7966.6807
                             b'\x00Pyfh\x08',  # 10.0.10.5/24 0050.7966.6808
                             b'\x00Pyfh\t',  # 10.0.10.3/24 0050.7966.6809
                             b'\x00Pyfh\n',  # 10.0.10.4/24 0050.7966.680a
                             b'\x00Pyfh\x0b',  # 10.0.30.2/24 0050.7966.680b
                             b'\x00Pyfh\x0c',  # 10.0.10.1/24 0050.7966.680c
                             b'\xc4\x01\x08\x83\x00\x01',
                             b'\xc4\x01\x08\x83\x00\x10',
                             b'\xc4\x01\x08\x83\x00 ',
                             b'\xc4\x01\x08\x83\x000'
                         ],
                         'dot1d_tp_fdb_port': [
                             '1',  # NMS
                             '3',
                             '3',
                             '3',
                             '3',
                             '2',
                             '2',
                             '16',
                             '3',
                             '3',
                             '3',
                             '3',
                             '3',
                             '3',
                             '3',
                             '3',
                             '3',
                             '2',
                             '15',
                             '5',
                             '6',
                             '7',
                             '8'
                         ]
                         },
         '10.0.0.2/24': {'sys_name': 'v2',
                         'port_activelist': [
                             ('1', 'Gi0/0'),
                             ('2', 'Gi0/1'),
                             ('3', 'Gi0/2'),
                             ('16', 'Gi3/3')
                         ],
                         'dot1d_base_num_ports': '16',
                         'dot1_base_type': '2',
                         'dot1d_tp_fdb_address': [
                             b'\x00\x0c)\\Bq',  # NMS 10.0.*.111/24 000c.295c.4271
                             b'\x00>\\\x01\x80\x01',  # 10.0.0.1/24 003e.5c01.8001
                             b'\x00>\\\x03\x80\x01',  # 10.0.0.3/24 003e.5c03.8001
                             b'\x00>\\\x04\x80\x01',  # 10.0.0.4/24 003e.5c04.8001
                             b'\x00>\\\x05\x80\x01',  # 10.0.0.5/24 003e.5c05.8001
                             b'\x00>\\\x06\x80\x01',  # 10.0.0.6/24 003e.5c06.8001
                             b'\x00Pyfh\n',  # 10.0.10.4/24 0050.7966.680a
                             b'\x00Pyfh\t',  # 10.0.10.3/24 0050.7966.6809
                             b'\x00Pyfh\x00',  # 10.0.30.1/24 0050.7966.6800
                             b'\x00Pyfh\x01',  # 10.0.30.3/24 0050.7966.6801
                             b'\x00Pyfh\x02',  # 10.0.20.1/24 0050.7966.6802
                             b'\x00Pyfh\x03',  # 10.0.20.2/24 0050.7966.6803
                             b'\x00Pyfh\x04',  # 10.0.20.3/24 0050.7966.6804
                             b'\x00Pyfh\x05',  # 10.0.10.2/24 0050.7966.6805
                             b'\x00Pyfh\x06',  # 10.0.20.4/24 0050.7966.6806
                             b'\x00Pyfh\x07',  # 10.0.10.6/24 0050.7966.6807
                             b'\x00Pyfh\x08',  # 10.0.10.5/24 0050.7966.6808
                             b'\x00Pyfh\x0b',  # 10.0.30.2/24 0050.7966.680b
                             b'\x00Pyfh\x0c'  # 10.0.10.1/24 0050.7966.680c
                         ],
                         'dot1d_tp_fdb_port': [
                             '1',  # NMS
                             '1',
                             '3',
                             '2',
                             '3',
                             '1',
                             '3',
                             '3',
                             '1',
                             '1',
                             '2',
                             '2',
                             '16',
                             '3',
                             '3',
                             '3',
                             '3',
                             '1',
                             '1'
                         ]
                         },
         '10.0.0.3/24': {'sys_name': 'v3',
                         'port_activelist': [
                             ('1', 'Gi0/0'),
                             ('2', 'Gi0/1'),
                             ('16', 'Gi3/3')
                         ],
                         'dot1d_base_num_ports': '16',
                         'dot1_base_type': '2',
                         'dot1d_tp_fdb_address': [
                             b'\x00\x0c)\\Bq',  # NMS 10.0.*.111/24 000c.295c.4271
                             b'\x00>\\\x01\x80\x01',  # 10.0.0.1/24 003e.5c01.8001
                             b'\x00>\\\x02\x80\x01',  # 10.0.0.2/24 003e.5c02.8001
                             b'\x00>\\\x04\x80\x01',  # 10.0.0.4/24 003e.5c04.8001
                             b'\x00>\\\x05\x80\x01',  # 10.0.0.5/24 003e.5c05.8001
                             b'\x00>\\\x06\x80\x01',  # 10.0.0.6/24 003e.5c06.8001
                             b'\x00Pyfh\n',  # 10.0.10.4/24 0050.7966.680a
                             b'\x00Pyfh\t',  # 10.0.10.3/24 0050.7966.6809
                             b'\x00Pyfh\x00',  # 10.0.30.1/24 0050.7966.6800
                             b'\x00Pyfh\x01',  # 10.0.30.3/24 0050.7966.6801
                             b'\x00Pyfh\x02',  # 10.0.20.1/24 0050.7966.6802
                             b'\x00Pyfh\x03',  # 10.0.20.2/24 0050.7966.6803
                             b'\x00Pyfh\x04',  # 10.0.20.3/24 0050.7966.6804
                             b'\x00Pyfh\x05',  # 10.0.10.2/24 0050.7966.6805
                             b'\x00Pyfh\x06',  # 10.0.20.4/24 0050.7966.6806
                             b'\x00Pyfh\x07',  # 10.0.10.6/24 0050.7966.6807
                             b'\x00Pyfh\x08',  # 10.0.10.5/24 0050.7966.6808
                             b'\x00Pyfh\x0b',  # 10.0.30.2/24 0050.7966.680b
                             b'\x00Pyfh\x0c'  # 10.0.10.1/24 0050.7966.680c
                         ],
                         'dot1d_tp_fdb_port': [
                             '1',  # NMS
                             '1',
                             '1',
                             '1',
                             '2',
                             '1',
                             '2',
                             '2',
                             '1',
                             '1',
                             '1',
                             '1',
                             '1',
                             '16',
                             '2',
                             '2',
                             '2',
                             '1',
                             '1'
                         ]},
         '10.0.0.4/24': {'sys_name': 'v4',
                         'port_activelist': [
                             ('1', 'Gi0/0'),
                             ('15', 'Gi3/2'),
                             ('16', 'Gi3/3')
                         ],
                         'dot1d_base_num_ports': '16',
                         'dot1_base_type': '2',
                         'dot1d_tp_fdb_address': [
                             b'\x00\x0c)\\Bq',  # NMS 10.0.*.111/24 000c.295c.4271
                             b'\x00>\\\x01\x80\x01',  # 10.0.0.1/24 003e.5c01.8001
                             b'\x00>\\\x02\x80\x01',  # 10.0.0.2/24 003e.5c02.8001
                             b'\x00>\\\x03\x80\x01',  # 10.0.0.3/24 003e.5c03.8001
                             b'\x00>\\\x05\x80\x01',  # 10.0.0.5/24 003e.5c05.8001
                             b'\x00>\\\x06\x80\x01',  # 10.0.0.6/24 003e.5c06.8001
                             b'\x00Pyfh\n',  # 10.0.10.4/24 0050.7966.680a
                             b'\x00Pyfh\t',  # 10.0.10.3/24 0050.7966.6809
                             b'\x00Pyfh\x00',  # 10.0.30.1/24 0050.7966.6800
                             b'\x00Pyfh\x01',  # 10.0.30.3/24 0050.7966.6801
                             b'\x00Pyfh\x02',  # 10.0.20.1/24 0050.7966.6802
                             b'\x00Pyfh\x03',  # 10.0.20.2/24 0050.7966.6803
                             b'\x00Pyfh\x04',  # 10.0.20.3/24 0050.7966.6804
                             b'\x00Pyfh\x05',  # 10.0.10.2/24 0050.7966.6805
                             b'\x00Pyfh\x06',  # 10.0.20.4/24 0050.7966.6806
                             b'\x00Pyfh\x07',  # 10.0.10.6/24 0050.7966.6807
                             b'\x00Pyfh\x08',  # 10.0.10.5/24 0050.7966.6808
                             b'\x00Pyfh\x0b',  # 10.0.30.2/24 0050.7966.680b
                             b'\x00Pyfh\x0c'  # 10.0.10.1/24 0050.7966.680c
                         ],
                         'dot1d_tp_fdb_port': [
                             '1',  # NMS
                             '1',
                             '1',
                             '1',
                             '1',
                             '1',
                             '1',
                             '1',
                             '1',
                             '1',
                             '15',
                             '16',
                             '1',
                             '1',
                             '1',
                             '1',
                             '1',
                             '1',
                             '1'
                         ]
                         },
         '10.0.0.5/24': {'sys_name': 'v5',
                         'port_activelist': [
                             ('1', 'Gi0/0'),
                             ('15', 'Gi3/2'),
                             ('16', 'Gi3/3')],
                         'dot1d_base_num_ports': '16',
                         'dot1_base_type': '2',
                         'dot1d_tp_fdb_address': [
                             b'\x00\x0c)\\Bq',  # NMS 10.0.*.111/24 000c.295c.4271
                             b'\x00>\\\x01\x80\x01',  # 10.0.0.1/24 003e.5c01.8001
                             b'\x00>\\\x02\x80\x01',  # 10.0.0.2/24 003e.5c02.8001
                             b'\x00>\\\x03\x80\x01',  # 10.0.0.3/24 003e.5c03.8001
                             b'\x00>\\\x04\x80\x01',  # 10.0.0.4/24 003e.5c04.8001
                             b'\x00>\\\x06\x80\x01',  # 10.0.0.6/24 003e.5c06.8001
                             b'\x00Pyfh\n',  # 10.0.10.4/24 0050.7966.680a
                             b'\x00Pyfh\t',  # 10.0.10.3/24 0050.7966.6809
                             b'\x00Pyfh\x00',  # 10.0.30.1/24 0050.7966.6800
                             b'\x00Pyfh\x01',  # 10.0.30.3/24 0050.7966.6801
                             b'\x00Pyfh\x02',  # 10.0.20.1/24 0050.7966.6802
                             b'\x00Pyfh\x03',  # 10.0.20.2/24 0050.7966.6803
                             b'\x00Pyfh\x04',  # 10.0.20.3/24 0050.7966.6804
                             b'\x00Pyfh\x05',  # 10.0.10.2/24 0050.7966.6805
                             b'\x00Pyfh\x06',  # 10.0.20.4/24 0050.7966.6806
                             b'\x00Pyfh\x07',  # 10.0.10.6/24 0050.7966.6807
                             b'\x00Pyfh\x08',  # 10.0.10.5/24 0050.7966.6808
                             b'\x00Pyfh\x0b',  # 10.0.30.2/24 0050.7966.680b
                             b'\x00Pyfh\x0c'  # 10.0.10.1/24 0050.7966.680c
                         ],
                         'dot1d_tp_fdb_port': [
                             '1',  # NMS
                             '1',
                             '1',
                             '1',
                             '1',
                             '1',
                             '16',
                             '15',
                             '1',
                             '1',
                             '1',
                             '1',
                             '1',
                             '1',
                             '1',
                             '1',
                             '1',
                             '1',
                             '1'
                         ]},
         '10.0.0.6/24': {'sys_name': 'v6',
                         'port_activelist': [
                             ('1', 'Gi0/0'),
                             ('15', 'Gi3/2'),
                             ('16', 'Gi3/3')],
                         'dot1d_base_num_ports': '16',
                         'dot1_base_type': '2',
                         'dot1d_tp_fdb_address': [
                             b'\x00\x0c)\\Bq',  # NMS 10.0.*.111/24 000c.295c.4271
                             b'\x00>\\\x01\x80\x01',  # 10.0.0.1/24 003e.5c01.8001
                             b'\x00>\\\x02\x80\x01',  # 10.0.0.2/24 003e.5c02.8001
                             b'\x00>\\\x03\x80\x01',  # 10.0.0.3/24 003e.5c03.8001
                             b'\x00>\\\x04\x80\x01',  # 10.0.0.4/24 003e.5c04.8001
                             b'\x00>\\\x05\x80\x01',  # 10.0.0.5/24 003e.5c05.8001
                             b'\x00Pyfh\n',  # 10.0.10.4/24 0050.7966.680a
                             b'\x00Pyfh\t',  # 10.0.10.3/24 0050.7966.6809
                             b'\x00Pyfh\x00',  # 10.0.30.1/24 0050.7966.6800
                             b'\x00Pyfh\x01',  # 10.0.30.3/24 0050.7966.6801
                             b'\x00Pyfh\x02',  # 10.0.20.1/24 0050.7966.6802
                             b'\x00Pyfh\x03',  # 10.0.20.2/24 0050.7966.6803
                             b'\x00Pyfh\x04',  # 10.0.20.3/24 0050.7966.6804
                             b'\x00Pyfh\x05',  # 10.0.10.2/24 0050.7966.6805
                             b'\x00Pyfh\x06',  # 10.0.20.4/24 0050.7966.6806
                             b'\x00Pyfh\x07',  # 10.0.10.6/24 0050.7966.6807
                             b'\x00Pyfh\x08',  # 10.0.10.5/24 0050.7966.6808
                             b'\x00Pyfh\x0b',  # 10.0.30.2/24 0050.7966.680b
                             b'\x00Pyfh\x0c'  # 10.0.10.1/24 0050.7966.680c
                         ],
                         'dot1d_tp_fdb_port': [
                             '1',  # NMS
                             '1',
                             '1',
                             '1',
                             '1',
                             '1',
                             '1',
                             '1',
                             '15',
                             '1',
                             '1',
                             '1',
                             '1',
                             '1',
                             '1',
                             '1',
                             '1',
                             '16',
                             '1'
                         ]
                         }
         }

    if complete_aft:
        return snmp_data_full

    return snmp_data


# %% ARP_TABLE_DATA
def auto_arp_table_data() -> ArpTableData:
    """
    Retorna dicionario com interface IP do elemento e sua tabela arp
    lista de objetos (IPv4Inteface, EUI)

    :return: dados de interface IP e EUI
    :rtype: dict
    """
    arp_table_data = \
        {'10.0.0.0/24': [
            # (IPv4Interface('10.0.0.111/24'), EUI('000c.295c.4271')),
            (IPv4Interface('10.0.0.1/24'), EUI('003e.5c01.8001')),
            (IPv4Interface('10.0.0.2/24'), EUI('003e.5c02.8001')),
            (IPv4Interface('10.0.0.3/24'), EUI('003e.5c03.8001')),
            (IPv4Interface('10.0.0.4/24'), EUI('003e.5c04.8001')),
            (IPv4Interface('10.0.0.5/24'), EUI('003e.5c05.8001')),
            (IPv4Interface('10.0.0.6/24'), EUI('003e.5c06.8001'))
        ],
            '10.0.10.0/24':
                [
                    (IPv4Interface('10.0.10.111/24'), EUI('000c.295c.4271')),
                    (IPv4Interface('10.0.10.1/24'), EUI('0050.7966.680c')),
                    (IPv4Interface('10.0.10.2/24'), EUI('0050.7966.6805')),
                    (IPv4Interface('10.0.10.3/24'), EUI('0050.7966.6809')),
                    (IPv4Interface('10.0.10.4/24'), EUI('0050.7966.680a')),
                    (IPv4Interface('10.0.10.5/24'), EUI('0050.7966.6808')),
                    (IPv4Interface('10.0.10.6/24'), EUI('0050.7966.6807'))],
            '10.0.20.0/24':
                [
                    (IPv4Interface('10.0.20.111/24'), EUI('000c.295c.4271')),
                    (IPv4Interface('10.0.20.1/24'), EUI('0050.7966.6802')),
                    (IPv4Interface('10.0.20.2/24'), EUI('0050.7966.6803')),
                    (IPv4Interface('10.0.20.3/24'), EUI('0050.7966.6804')),
                    (IPv4Interface('10.0.20.4/24'), EUI('0050.7966.6806'))],
            '10.0.30.0/24':
                [
                    (IPv4Interface('10.0.30.111/24'), EUI('000c.295c.4271')),
                    (IPv4Interface('10.0.30.1/24'), EUI('0050.7966.6800')),
                    (IPv4Interface('10.0.30.2/24'), EUI('0050.7966.680b')),
                    (IPv4Interface('10.0.30.3/24'), EUI('0050.7966.6801'))]}
    for key, value in arp_table_data.items():
        for ip_addres, mac_address in value:
            mac_address.dialect = mac_cisco
    return arp_table_data


ARP_TABLE_DATA = auto_arp_table_data()


# %% funcao set_arp_table
def set_arp_table(subnet: SubNet,
                  probes: int = 1,
                  auto_fill: Optional[bool] = None,
                  manual_fill: Optional[List[Tuple[str, str]]] = None,
                  include_me: Optional[bool] = None,
                  timeout: int = 4,
                  mode: str = 'arp') \
        -> Optional[ArpTable]:
    """
    Envia pacotes ARP em broadcast p/ atualizar a tabela MAC dos elementos
    Retorna tupla para cada rede fornecida contendo lista de IPs, de MACs e
    total de elementos
        - Usa Rede fornecida [subnet.address] como destino de quadros L2.
    auto_fill:
        Usado para atribuir automaticamente arp_table
    manual_fill:
        Entrada manual de falores sem coleta SNMP no formato (IP, MAC):
            >>> [(IPv4Interface('10.0.0.1'), EUI('003e.5c01.8001')), ...]
    post:
        False
            não apresenta detalhes na tela
        True
            apresenta detalhes na tela

    Exemplo:
    ____
        >>> rede1 = SubNet('10.0.0.0/24')
        >>> rede1.update_arp_table()
        >>> rede1.update_arp_table(manual_fill=
                              [('10.0.0.1', '003e.5c01.8001'),
                               ('10.0.0.2', '003e.5c02.8001'),
                               ('10.0.0.3', '003e.5c03.8001'),
                               ('10.0.0.4', '003e.5c04.8001'),
                               ('10.0.0.5', '003e.5c05.8001'),
                               ('10.0.0.6', '003e.5c06.8001')])
    :param subnet: Rede a ter elementos rastreados
    :param probes: quantidade de quadros para cada endereco da rede destino
    :param auto_fill: atribuido automaticamente da constante ARP_TABLE_DATA
    :param manual_fill: tuplas de (ip: str, mac: str)
    :param include_me: True para incluir o NMS na arp table
    :param timeout: tempo para considerar sem reposta (segundos)
    :param mode: 'arp' 'ping' 'multping'
    :return: Lista com tupla (IPv4Interface, EUI) dos elementos identificados
    :rtype: Optional[List[Tupla[IPv4Interface, EUI]]]
    """
    mode = mode.lower()
    myip = None
    arp_table_list = None
    if manual_fill:
        print('Valores da Tabela ARP atribuidos manualmente')
        return ip_mac_to_arp_table(manual_fill, subnet.prefixlen)
    if auto_fill:
        print('Valores da Tabela ARP atribuidos automaticamente')
        return ARP_TABLE_DATA.get(subnet.compressed)
    ip_list, mac_list = [], []
    if include_me:
        for ip in get_myip():
            if ip in subnet:
                myip = ip
                ip_list.append(ip)
        mac_list.append(get_mymac())
        mac_list[-1].dialect = mac_cisco
    ips = []
    for ip_obj in subnet.hosts():
        if ip_obj.compressed != myip.ip.compressed:
            ips.append(ip_obj.compressed)

    if mode == 'arp':
        for _ in range(probes):
            ans, _ = srp(Ether(dst="ff:ff:ff:ff:ff:ff") /
                         ARP(pdst=subnet.address),
                         timeout=timeout)
        for _, recebe in ans:
            ip_list.append(
                IPv4Interface(recebe[0][1].summary().split()[5]
                              + '/'
                              + str(subnet.prefixlen))
            )
            mac_list.append(
                EUI(
                    recebe[0][1].summary().split()[3].replace(':', '')
                )
            )
            mac_list[-1].dialect = mac_cisco

        arp_table_list = sorted(list(zip(ip_list, mac_list)))
    elif mode == 'ping':
        for ip in ips:
            if ip == myip.ip.compressed:
                continue
            if ping_ip(ip, probes, timeout):
                ip_list.append(IPv4Interface(ip + '/' + str(subnet.prefixlen)))
                arp_out = subprocess.run("arp -n".split() + [ip],
                                         stdout=subprocess.PIPE,
                                         universal_newlines=True)
                arp = arp_out.stdout.split('\n')[1].split(maxsplit=3)[2]
                mac_list.append(EUI(arp.replace(':', '')))
                mac_list[-1].dialect = mac_cisco
            else:
                continue
        arp_table_list = sorted(list(zip(ip_list, mac_list)))
    elif mode == 'multping':
        # ips = (ip_obj.compressed for ip_obj in hosts)
        # for ip in ips:
        #     if myip.ip.compressed in ips:
        #         continue
        print(f"Iniciando envio de ({len(ips)*probes}) "
              f"multi-ping para {subnet!r}...")
        alives = ping_nmap(ips, probes, timeout)
        if alives:
            for ip in alives:
                ip_list.append(IPv4Interface(ip + '/' + str(subnet.prefixlen)))
                arp_out = subprocess.run("arp -n".split() + [ip],
                                         stdout=subprocess.PIPE,
                                         universal_newlines=True)
                arp = arp_out.stdout.split('\n')[1].split(maxsplit=3)[2]
                mac_list.append(EUI(arp.replace(':', '')))
                mac_list[-1].dialect = mac_cisco
        arp_table_list = sorted(list(zip(ip_list, mac_list)))

    if not arp_table_list:
        print(f'Tabela ARP nao definida para rede {subnet.address!r}')
        return None
    return arp_table_list


# %% funcao get_mymac
def get_mymac(interface: str = 'ens33', vendor: str = 'unix') -> EUI:
    """
    Retorna objeto EUI com endereco MAC da estacao onde a funcao e chamada

    :param interface: string com o nome da interface do computador NMS
    :param vendor:  cisco ou unix
    :return: EUI com MAC do host
    :rtype: EUI
    """
    vendor_list = {'cisco': mac_cisco, 'unix': mac_unix_expanded}
    ls_net = subprocess.run('ls -l /sys/class/net/'.split(),
                            stdout=subprocess.PIPE,
                            universal_newlines=True).stdout
    if interface not in ls_net:
        while True:
            interface = input(ls_net + '\nEntre nome da inteface: ')
            if interface not in ls_net:
                print('\n## Interface nao identificada ##\nConsulte lista: ')
            else:
                break

    mymac = subprocess.run(
        ('cat /sys/class/net/' + interface + '/address').split(),
        stdout=subprocess.PIPE,
        universal_newlines=True)
    mymac = EUI(mymac.stdout.strip('\n'))
    mymac.dialect = vendor_list.get(str.lower(vendor))
    return mymac


# %% funcao get_myip
def get_myip() -> List[IPv4Interface]:
    """
    Retorna lista com objetos IPv4Interface dos enderecos IPs da estacao onde
    a funcao e chamada

    :return: Lista de interfaces IPs do host
    :rtype: List[IPv4Interface]
    """
    output = subprocess.run(
        "ifconfig".split(),
        stdout=subprocess.PIPE,
        universal_newlines=True)
    output = output.stdout.split('\n')
    my_ips = []
    for line in output:
        if 'inet ' in line and "127.0.0." not in line:
            line = line.strip().split()
            my_ips.append((line[1], line[3]))
    return [IPv4Interface(ip + '/' + mask) for ip, mask in my_ips]


# %% ping icmp
def ping_ip(ip_address: str,
            repete: int = 1,
            espera: int = 1,
            tamanho: int = 1) -> bool:
    """
    Executa um comando de PING para teste de conectividade ICMP.

    Imprime resultado na tela e Retorna str com estatistica.

    ip_address = Endereco IP de destino no formato '0.0.0.0':
    ----
    Usa o IP fornecido como destino para o ICMP-request

    Exemplos:
    ----
    >>> ping_ip('10.0.0.1')

    >>> ping_ip('10.0.0.1', repete=2, espera=2, tamanho=2)
    :param ip_address: string do endereço ip de destino
    :param repete: quantidade de pacotes para enviar
    :param espera: tempo em segundos para timeout
    :param tamanho: quantidade de bytes a enviar por probe
    :return: Resposta do ping
    :rtype: str
    """
    print(f'===> Iniciando ping ICMP para IP {ip_address}')
    comando = ['ping', '-s', str(tamanho),
               '-c', str(repete),
               '-W', str(espera),
               ip_address]
    pong = subprocess.run(comando,
                          stdout=subprocess.PIPE,
                          universal_newlines=True)
    if not pong.stdout:
        print(f'Falha ao iniciar PING para {ip_address!r}')
        return False
    print(pong.stdout)
    resultado = pong.stdout.split(sep='\n')[-3]
    print(f"PING para {ip_address!r}: {resultado}")
    if '100% packet loss' in resultado:
        return False
    return True


def ping_nmap(ips: List[str],
              probes: int = 1,
              timeout: int = 4,
              timeout_template: int = 3) -> Optional[List[str]]:
    """Gera icmp echo request (ping) concorrente com nmap para lista de ips de
    destino.

    :param ips: lista com ips a rastrear
    :param probes: quantidade de pacotes para cada destino
    :param timeout: tempo de espera por responta
    :param timeout_template: polite (2), normal (3), aggressive (4)
    :return: lista de IPs dos hosts up/alive
    :rtype: List[str]
    """
    # nmap -T3 -sn -PE -n --send-ip --disable-arp-ping 10.0.0,10,20,30.-
    command = [
        'nmap',
        '-T', str(timeout_template),
        '--min-rtt-timeout', str(timeout),
        '--max-retries', str(probes - 1),
        '-sn',
        '-PE',
        '-n',
        '--send-ip',
        '--disable-arp-ping'
    ]

    answer = subprocess.run(command + ips,
                            stdout=subprocess.PIPE,
                            universal_newlines=True).stdout
    if not answer:
        print(f'Falha ao iniciar PING para {ips!r}')
        return False
    lines = answer.split(sep='\n')
    hosts = [line.rsplit(maxsplit=1)[-1] for line in lines
             if 'Nmap scan report' in line]
    return hosts


# %% funcao ip_mac_to_arp_table
def ip_mac_to_arp_table(ip_mac_list: List[Tuple[str, str]],
                        net_prefix: Union[str, int]) -> ArpTable:
    """
    Converte lista de pares (IP, MAC) em (IPv4Interface, EUI)

    :param ip_mac_list:
        lista de ip e mac com prefixo de mascara de rede
    :param net_prefix:
        lista
    :return:
        lista com objetos IPv4Interface, EUI
    :rtype: list
    Exemplo
    ----
    >>> ip_mac_to_arp_table([
            ('10.0.0.1', '003e5c018001'),
            ('10.0.0.2', '003e5c018002')
            ],
            24)
    """
    ip_list, mac_list = [], []
    for ip, mac in ip_mac_list:
        ip_list.append(IPv4Interface(ip + '/' + str(net_prefix)))
        mac.replace('.', '').replace(':', '').replace('-', '')
        mac_list.append(EUI(mac))
        mac_list[-1].dialect = mac_cisco
    return sorted(list(zip(ip_list, mac_list)))


# %% map function
def map_func_list(funcao, lista):
    """
    Retorna a lista de entrada com funcao aplicada para cada elemento

    :param funcao:
    :param lista:
    :return: List
    """
    return [funcao(elemento) for elemento in lista]


def map_func_dict(funcao, dicionario):
    """
    Retorna o dicionario de entrada com funcao aplicada para cada valor
    :param funcao:
    :param dicionario:
    :return: Dict
    """
    return {key: funcao(valor) for key, valor in dicionario.itens()}


# %% to bytes
def to_bytes(x: Union[int, bytes, str]) -> bytes:
    """
    Converte argumento de entrada em bytes

    Exemplo:
    ----
        >>> to_bytes(10)
        ... b'10'

        >>> to_bytes('exemplo')
        ... b'exemplo'

        >>> type(to_bytes('exemplo'))
        ... bytes

        >>> to_bytes(b'em bytes')
        ... b'em bytes'
    """
    if type(x) is bytes:
        return x
    if type(x) is str:
        return bytes([ord(i) for i in x])
    return to_bytes(str(x))


# %% mac functions
def macstr_tobytes(mac: Union[bytes, str]) -> bytes:
    """
    Converte string de endereco MAC para bytes
    :param mac:
    :return:
    """
    if isinstance(mac, bytes):
        return mac
    if isinstance(mac, str):
        return int(mac, 16).to_bytes(6, 'big')
    return macstr_tobytes(str(mac))


# %% subprocess nms_config
def nms_config(mode: bool = START) -> None:
    """
    Define IP, mascara de cada interface do terminal para atuar como NMS


    mode = True (1):
    ----
    Configura NMS com IP e mascara
        ens33:0 10.0.0.111 netmask 255.255.255.0

        ens33:10 10.0.10.111 netmask 255.255.255.0

        ens33:20 10.0.20.111 netmask 255.255.255.0

        ens33:30 10.0.30.111 netmask 255.255.255.0

    mode = outro:
    ----
    desconfigura NMS, removendo IP, rota default, desativa e ativa novamente a
    interface

    Exemplo:
    ----
        - inicia configuracao do NMS:
        >>> nms_config()
        >>> nms_config(True)

        - para NMS e remove configuracao:
        >>> nms_config(False)
        >>> nms_config(STOP)
    """
    if mode:
        print('Iniciando configuracao das Interfaces do NMS...')
        ifconfig = subprocess.run(['ifconfig'],
                                  stdout=subprocess.PIPE,
                                  universal_newlines=True)
        route_table = subprocess.run('route -n'.split(),
                                     stdout=subprocess.PIPE,
                                     universal_newlines=True)
        print('Configurando inteface ens33:0...')
        while 'inet 10.0.0.111' not in ifconfig.stdout \
                and '10.0.0.0' not in route_table.stdout:
            subprocess.run('sudo ifconfig ens33:0 10.0.0.111 \
                           netmask 255.255.255.0'.split(),
                           stdout=subprocess.PIPE,
                           universal_newlines=True)
            ifconfig = subprocess.run(['ifconfig'],
                                      stdout=subprocess.PIPE,
                                      universal_newlines=True)
            route_table = subprocess.run('route -n'.split(),
                                         stdout=subprocess.PIPE,
                                         universal_newlines=True)
            conf.route.resync()
        print('Configurando inteface ens33:10...')
        while 'inet 10.0.10.111' not in ifconfig.stdout \
                and '10.0.10.0' not in route_table.stdout:
            subprocess.run('sudo ifconfig ens33:10 10.0.10.111 \
                           netmask 255.255.255.0'.split(),
                           stdout=subprocess.PIPE,
                           universal_newlines=True)
            ifconfig = subprocess.run(['ifconfig'],
                                      stdout=subprocess.PIPE,
                                      universal_newlines=True)
            route_table = subprocess.run('route -n'.split(),
                                         stdout=subprocess.PIPE,
                                         universal_newlines=True)
            conf.route.resync()
        print('Configurando inteface ens33:20...')
        while 'inet 10.0.20.111' not in ifconfig.stdout \
                and '10.0.20.0' not in route_table.stdout:
            subprocess.run('sudo ifconfig ens33:20 10.0.20.111 \
                           netmask 255.255.255.0'.split(),
                           stdout=subprocess.PIPE,
                           universal_newlines=True)
            ifconfig = subprocess.run(['ifconfig'],
                                      stdout=subprocess.PIPE,
                                      universal_newlines=True)
            route_table = subprocess.run('route -n'.split(),
                                         stdout=subprocess.PIPE,
                                         universal_newlines=True)
            conf.route.resync()
        print('Configurando inteface ens33:30...')
        sleep(1.5)
        while 'inet 10.0.30.111' not in ifconfig.stdout \
                and '10.0.30.0' not in route_table.stdout:
            subprocess.run('sudo ifconfig ens33:30 10.0.30.111 \
                           netmask 255.255.255.0'.split(),
                           stdout=subprocess.PIPE,
                           universal_newlines=True)
            ifconfig = subprocess.run(['ifconfig'],
                                      stdout=subprocess.PIPE,
                                      universal_newlines=True)
            route_table = subprocess.run('route -n'.split(),
                                         stdout=subprocess.PIPE,
                                         universal_newlines=True)
            conf.route.resync()
        return print('Configuracao do NMS concluida.')

    else:
        print('Desconfigurando inteface ens33...')
        subprocess.run('sudo ifconfig ens33 0'.split(),
                       stdout=subprocess.PIPE,
                       universal_newlines=True)
        print('Desativando inteface ens33:0...')
        subprocess.run('sudo ifconfig ens33:0 down'.split(),
                       stdout=subprocess.PIPE,
                       universal_newlines=True)
        print('Desativando inteface ens33:10...')
        subprocess.run('sudo ifconfig ens33:10 down'.split(),
                       stdout=subprocess.PIPE,
                       universal_newlines=True)
        print('Desativando inteface ens33:20...')
        subprocess.run('sudo ifconfig ens33:20 down'.split(),
                       stdout=subprocess.PIPE,
                       universal_newlines=True)
        print('Desativando inteface ens33:30...')
        subprocess.run('sudo ifconfig ens33:30 down'.split(),
                       stdout=subprocess.PIPE,
                       universal_newlines=True)
        print('Desativando inteface ens33...')
        subprocess.run('sudo ifconfig ens33 down'.split(),
                       stdout=subprocess.PIPE,
                       universal_newlines=True)
        print('Configuracao da inteface ens33 foi removida.')
        print('Reativando inteface ens33...')
        subprocess.run('sudo ifconfig ens33 up'.split(),
                       stdout=subprocess.PIPE,
                       universal_newlines=True)
        conf.route.resync()
        print('Pronto.')


# %% subprocess config_nms
# HINT config_nms: configura intefaces do NMS com base nas redes fornecidas
def config_nms(redes=None, ip=250, interface_name='ens33') -> None:
    """
    Define IP e mascara, com base em redes de estrada, de cada interface do
    terminal para atuar como NMS
    """
    if not redes:
        return None
    print('Iniciando configuracao das Interfaces do NMS...')
    for rede_num, rede in enumerate(sorted([red for red in redes])):
        rede_prefix = rede.network_address.compressed.rsplit(".", 1)[0]
        interface_ip = f'{rede_prefix}.{ip}'
        interface = f'{interface_name}:{rede_num}'
        ifconfig = subprocess.run(['ifconfig'],
                                  stdout=subprocess.PIPE,
                                  universal_newlines=True)
        route_table = subprocess.run('route -n'.split(),
                                     stdout=subprocess.PIPE,
                                     universal_newlines=True)
        print(f'Configurando inteface {interface!r} com ip {interface_ip!r}...')
        while f'inet {interface_ip}' not in ifconfig.stdout \
                and f'{rede_prefix}.0' not in route_table.stdout:
            subprocess.run(f'sudo ifconfig {interface} {interface_ip} '
                           f'netmask {rede.netmask.exploded}'.split(),
                           stdout=subprocess.PIPE,
                           universal_newlines=True)
            ifconfig = subprocess.run(['ifconfig'],
                                      stdout=subprocess.PIPE,
                                      universal_newlines=True)
            route_table = subprocess.run('route -n'.split(),
                                         stdout=subprocess.PIPE,
                                         universal_newlines=True)
            conf.route.resync()
    return print('Configuracao do NMS concluida.')


# %% test_snmp
# =============================================================================
# By sending appropriate SNMP queries to each detected element,
# the NMS infers the element type and if it has additional
# addresses (e.g., switches or routers).
# =============================================================================

def is_internal_node(node: str) -> bool:
    """
    Enviando as solicitacoes apropriadas para node verificando se eh
    switch ou bridge (internal node) com gerenciamento SNMP

    :param node: string do IP para testar
    :return: True se suporta snmp (internal). False caso contrario (leaf)
    :rtype: bool
    """
    snmp = Session(hostname=node,
                   version=2,
                   community='public')
    try:
        snmp.get_next('1.3.6.1.2.1.17')
    except (EasySNMPTimeoutError, EasySNMPUnknownObjectIDError) as err:
        print(f'Node {node} SNMP bridge error, {err}')
        return False
    else:
        print('SNMP bridge: OK.')
        return True


def is_leaf_node(node: str) -> bool:
    """
    Enviando as solicitacoes apropriadas para node verificando se NAO eh
    switch ou bridge (leaf node) sem gerenciamento SNMP

    :param node: string do IP para testar
    :return: True se não suporta snmp (leaf). False caso contrario (internal)
    :rtype: bool
    """
    return not is_internal_node(node)

# %% scapy functions
#    executar como super-user (sudo) para gerar pacotes
# https://phaethon.github.io/scapy/api/usage.html
# sr1              : Send packets at layer 3 and return only the first answer
# srp1             : Send and rcv pkt layer 2 and return only the 1st answer
# sniff            : Sniff packets
# arping           : Send ARP who-has requests to determine which hosts are up

# >>> conf.route
# Network Netmask Gateway Iface
# 127.0.0.0 255.0.0.0 0.0.0.0 lo
# 192.168.8.0 255.255.255.0 0.0.0.0 eth0
# 0.0.0.0 0.0.0.0 192.168.8.1 eth0
# >>> conf.route.delt(net="0.0.0.0/0",gw="192.168.8.1")
# >>> conf.route.add(net="0.0.0.0/0",gw="192.168.8.254")
# >>> conf.route.add(host="192.168.1.1",gw="192.168.8.1")
# >>> conf.route
# Network Netmask Gateway Iface
# 127.0.0.0 255.0.0.0 0.0.0.0 lo
# 192.168.8.0 255.255.255.0 0.0.0.0 eth0
# 0.0.0.0 0.0.0.0 192.168.8.254 eth0
# 192.168.1.1 255.255.255.255 192.168.8.1 eth0
# >>> conf.route.resync()
# >>> conf.route
# Network Netmask Gateway Iface
# 127.0.0.0 255.0.0.0 0.0.0.0 lo
# 192.168.8.0 255.255.255.0 0.0.0.0 eth0
# 0.0.0.0 0.0.0.0 192.168.8.1 eth0


# %% ARP Ping scapy
# The fastest way to discover hosts on a -local- ethernet network is to use the ARP Ping method:
# >>> ans, unans = srp(Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst="10.0.0.0/24"),timeout=4)

# def update_arp_table(*redes: str) -> List[Tuple[List[str], List[str], int]]:
#    """
#    Envia pacotes ARP em broadcast para atualizar a tabela MAC dos elementos
#    Retorna tupla para cada rede fornecida contendo lista de IPs, de MACs e
#    total de elementos
#
#    redes = Endereco IP da rede de destino no formato '0.0.0.0/0':
#    ----
#    Usa o IP de rede fornecido como destino para o envio de quadros L2.
#
#    Exemplo:
#    ________
#    >>> update_arp_table('10.0.0.0/24')
#
#    >>> update_arp_table('10.0.0.0/24', '10.0.10.0/24')
#
#    >>> update_arp_table(*redes) #redes = ['10.0.0.0/24','10.0.10.0/24','10.0.20.0/24']
#    """
#    resposta_redes = []#    srp(Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst=rede),timeout=1)
#    for rede in redes:
#        print()
#        print(f'===> Iniciando descoberta da rede {rede}')
#        ans, unans = srp(Ether(dst="ff:ff:ff:ff:ff:ff") /
#                         ARP(pdst=rede),
#                         timeout=4)
#        ip, mac = [], []
#        num_nodes_ativos = 0
#        for envia, recebe in ans:
#            ip.append(recebe[0][1].summary().split()[5])
#            mac.append(recebe[0][1].summary().split()[3])
#        print(f'Tabela ARP para a rede {rede!r}:')
#        for node in range(len(ip)):
#            print(f'    IP: {ip[node]}, MAC: {mac[node]}')
#            num_nodes_ativos += 1
#        resposta_redes.append((ip, mac, num_nodes_ativos))
#        print(f'Rede: {rede!r}; '
#                f'Total de nodes: {str(num_nodes_ativos)!r}')
#    return resposta_redes


# %%
# redes = ['10.0.0.0/24', '10.0.10.0/24','10.0.20.0/24', '10.0.30.0/24']

# Answers can be reviewed with the following command:
# >>> ans.summary(lambda s,r: r.sprintf("%Ether.src% %ARP.psrc%"))
# Scapy also includes a built-in arping() function which performs similar to the above two commands:

# >>> arping("192.168.1.*")
# conf.route.resync()


# %% scapy icmp
# icmp_net = IP(dst='10.0.10.0/24')/ICMP()
# icmp_host = IP(dst='10.0.10.1')/ICMP()
# send(icmp_net)
# send(icmp_host)
# scapy.layers.l2.Ether
